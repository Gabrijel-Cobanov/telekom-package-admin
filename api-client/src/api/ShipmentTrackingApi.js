/**
 * Shipment Tracking API
 * Shipment Tracking Management provides operations to track shipments.
 *
 * The version of the OpenAPI document: 1.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ShipmentTracking from '../model/ShipmentTracking';

/**
* ShipmentTracking service.
* @module api/ShipmentTrackingApi
* @version 1.14.0
*/
export default class ShipmentTrackingApi {

    /**
    * Constructs a new ShipmentTrackingApi. 
    * @alias module:api/ShipmentTrackingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getShipmentTracking operation.
     * @callback module:api/ShipmentTrackingApi~getShipmentTrackingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShipmentTracking>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve tracking details of a shipment
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] To retrieve the shipments tracking from a specific customer
     * @param {String} [status] Status of shipment
     * @param {String} [orderId] Id of the order whose shipment has to be fetched
     * @param {String} [page] page, positive integer, starts with 0
     * @param {String} [size] page size, positive integer greater than 0
     * @param {String} [sort] data sort parameter, starts with '+' or '-' prefix; when prefix empty, '+' is default; multiple attributes can be used separated by ','
     * @param {module:api/ShipmentTrackingApi~getShipmentTrackingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShipmentTracking>}
     */
    getShipmentTracking(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'customerId': opts['customerId'],
        'status': opts['status'],
        'orderId': opts['orderId'],
        'page': opts['page'],
        'size': opts['size'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ShipmentTracking];
      return this.apiClient.callApi(
        '/shipmentTracking', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getShipmentTrackingByTrackingId operation.
     * @callback module:api/ShipmentTrackingApi~getShipmentTrackingByTrackingIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentTracking} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve tracking details of a shipment by tracking id
     * @param {String} id Id of the shipment that needs to be fetched
     * @param {module:api/ShipmentTrackingApi~getShipmentTrackingByTrackingIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShipmentTracking}
     */
    getShipmentTrackingByTrackingId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getShipmentTrackingByTrackingId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShipmentTracking;
      return this.apiClient.callApi(
        '/shipmentTracking/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchShipmentTrackingUsingPATCH operation.
     * @callback module:api/ShipmentTrackingApi~patchShipmentTrackingUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentTracking} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates ShipmentTracking
     * @param {String} fields list of fields that needs to be changed in PATCH method
     * @param {String} id id
     * @param {module:model/ShipmentTracking} shipmentTracking ShipmentTracking
     * @param {module:api/ShipmentTrackingApi~patchShipmentTrackingUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShipmentTracking}
     */
    patchShipmentTrackingUsingPATCH(fields, id, shipmentTracking, callback) {
      let postBody = shipmentTracking;
      // verify the required parameter 'fields' is set
      if (fields === undefined || fields === null) {
        throw new Error("Missing the required parameter 'fields' when calling patchShipmentTrackingUsingPATCH");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchShipmentTrackingUsingPATCH");
      }
      // verify the required parameter 'shipmentTracking' is set
      if (shipmentTracking === undefined || shipmentTracking === null) {
        throw new Error("Missing the required parameter 'shipmentTracking' when calling patchShipmentTrackingUsingPATCH");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': fields
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShipmentTracking;
      return this.apiClient.callApi(
        '/shipmentTracking/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postShipmentTracking operation.
     * @callback module:api/ShipmentTrackingApi~postShipmentTrackingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentTracking} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates new ShipmentTracking
     * @param {module:model/ShipmentTracking} body The ShipmentTracking to be created
     * @param {module:api/ShipmentTrackingApi~postShipmentTrackingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShipmentTracking}
     */
    postShipmentTracking(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postShipmentTracking");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShipmentTracking;
      return this.apiClient.callApi(
        '/shipmentTracking', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
