/**
 * Shipment Tracking API
 * Shipment Tracking Management provides operations to track shipments.
 *
 * The version of the OpenAPI document: 1.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Address model module.
 * @module model/Address
 * @version 1.14.0
 */
class Address {
    /**
     * Constructs a new <code>Address</code>.
     * Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).
     * @alias module:model/Address
     */
    constructor() { 
        
        Address.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Address</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Address} obj Optional instance to populate.
     * @return {module:model/Address} The populated <code>Address</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Address();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('streetNr')) {
                obj['streetNr'] = ApiClient.convertToType(data['streetNr'], 'String');
            }
            if (data.hasOwnProperty('streetName')) {
                obj['streetName'] = ApiClient.convertToType(data['streetName'], 'String');
            }
            if (data.hasOwnProperty('streetSuffix')) {
                obj['streetSuffix'] = ApiClient.convertToType(data['streetSuffix'], 'String');
            }
            if (data.hasOwnProperty('postcode')) {
                obj['postcode'] = ApiClient.convertToType(data['postcode'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Address</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Address</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['streetNr'] && !(typeof data['streetNr'] === 'string' || data['streetNr'] instanceof String)) {
            throw new Error("Expected the field `streetNr` to be a primitive type in the JSON string but got " + data['streetNr']);
        }
        // ensure the json data is a string
        if (data['streetName'] && !(typeof data['streetName'] === 'string' || data['streetName'] instanceof String)) {
            throw new Error("Expected the field `streetName` to be a primitive type in the JSON string but got " + data['streetName']);
        }
        // ensure the json data is a string
        if (data['streetSuffix'] && !(typeof data['streetSuffix'] === 'string' || data['streetSuffix'] instanceof String)) {
            throw new Error("Expected the field `streetSuffix` to be a primitive type in the JSON string but got " + data['streetSuffix']);
        }
        // ensure the json data is a string
        if (data['postcode'] && !(typeof data['postcode'] === 'string' || data['postcode'] instanceof String)) {
            throw new Error("Expected the field `postcode` to be a primitive type in the JSON string but got " + data['postcode']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }

        return true;
    }


}



/**
 * Unique identifier of the address
 * @member {String} id
 */
Address.prototype['id'] = undefined;

/**
 * Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses
 * @member {String} streetNr
 */
Address.prototype['streetNr'] = undefined;

/**
 * Name of the street or other street type
 * @member {String} streetName
 */
Address.prototype['streetName'] = undefined;

/**
 * A modifier denoting a relative direction
 * @member {String} streetSuffix
 */
Address.prototype['streetSuffix'] = undefined;

/**
 * Descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also known as zipcode)
 * @member {String} postcode
 */
Address.prototype['postcode'] = undefined;

/**
 * City that the address is in
 * @member {String} city
 */
Address.prototype['city'] = undefined;

/**
 * Country(ISO 3166-1 alpha-3 digit code) that the address is in
 * @member {String} country
 */
Address.prototype['country'] = undefined;






export default Address;

