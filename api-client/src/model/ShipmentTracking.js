/**
 * Shipment Tracking API
 * Shipment Tracking Management provides operations to track shipments.
 *
 * The version of the OpenAPI document: 1.14.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import CustomerRefType from './CustomerRefType';
import OrderRefType from './OrderRefType';

/**
 * The ShipmentTracking model module.
 * @module model/ShipmentTracking
 * @version 1.14.0
 */
class ShipmentTracking {
    /**
     * Constructs a new <code>ShipmentTracking</code>.
     * Shipment Tracking Type
     * @alias module:model/ShipmentTracking
     */
    constructor() { 
        
        ShipmentTracking.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ShipmentTracking</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShipmentTracking} obj Optional instance to populate.
     * @return {module:model/ShipmentTracking} The populated <code>ShipmentTracking</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShipmentTracking();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('carrier')) {
                obj['carrier'] = ApiClient.convertToType(data['carrier'], 'String');
            }
            if (data.hasOwnProperty('trackingCode')) {
                obj['trackingCode'] = ApiClient.convertToType(data['trackingCode'], 'String');
            }
            if (data.hasOwnProperty('carrierTrackingUrl')) {
                obj['carrierTrackingUrl'] = ApiClient.convertToType(data['carrierTrackingUrl'], 'String');
            }
            if (data.hasOwnProperty('trackingDate')) {
                obj['trackingDate'] = ApiClient.convertToType(data['trackingDate'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusChangeDate')) {
                obj['statusChangeDate'] = ApiClient.convertToType(data['statusChangeDate'], 'Date');
            }
            if (data.hasOwnProperty('statusChangeReason')) {
                obj['statusChangeReason'] = ApiClient.convertToType(data['statusChangeReason'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
            if (data.hasOwnProperty('estimatedDeliveryDate')) {
                obj['estimatedDeliveryDate'] = ApiClient.convertToType(data['estimatedDeliveryDate'], 'Date');
            }
            if (data.hasOwnProperty('addressFrom')) {
                obj['addressFrom'] = Address.constructFromObject(data['addressFrom']);
            }
            if (data.hasOwnProperty('addressTo')) {
                obj['addressTo'] = Address.constructFromObject(data['addressTo']);
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], [OrderRefType]);
            }
            if (data.hasOwnProperty('relatedCustomer')) {
                obj['relatedCustomer'] = CustomerRefType.constructFromObject(data['relatedCustomer']);
            }
            if (data.hasOwnProperty('createDate')) {
                obj['createDate'] = ApiClient.convertToType(data['createDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShipmentTracking</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShipmentTracking</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['carrier'] && !(typeof data['carrier'] === 'string' || data['carrier'] instanceof String)) {
            throw new Error("Expected the field `carrier` to be a primitive type in the JSON string but got " + data['carrier']);
        }
        // ensure the json data is a string
        if (data['trackingCode'] && !(typeof data['trackingCode'] === 'string' || data['trackingCode'] instanceof String)) {
            throw new Error("Expected the field `trackingCode` to be a primitive type in the JSON string but got " + data['trackingCode']);
        }
        // ensure the json data is a string
        if (data['carrierTrackingUrl'] && !(typeof data['carrierTrackingUrl'] === 'string' || data['carrierTrackingUrl'] instanceof String)) {
            throw new Error("Expected the field `carrierTrackingUrl` to be a primitive type in the JSON string but got " + data['carrierTrackingUrl']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['statusChangeReason'] && !(typeof data['statusChangeReason'] === 'string' || data['statusChangeReason'] instanceof String)) {
            throw new Error("Expected the field `statusChangeReason` to be a primitive type in the JSON string but got " + data['statusChangeReason']);
        }
        // validate the optional field `addressFrom`
        if (data['addressFrom']) { // data not null
          Address.validateJSON(data['addressFrom']);
        }
        // validate the optional field `addressTo`
        if (data['addressTo']) { // data not null
          Address.validateJSON(data['addressTo']);
        }
        if (data['order']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['order'])) {
                throw new Error("Expected the field `order` to be an array in the JSON data but got " + data['order']);
            }
            // validate the optional field `order` (array)
            for (const item of data['order']) {
                OrderRefType.validateJSON(item);
            };
        }
        // validate the optional field `relatedCustomer`
        if (data['relatedCustomer']) { // data not null
          CustomerRefType.validateJSON(data['relatedCustomer']);
        }

        return true;
    }


}



/**
 * Unique identifier of the shipment
 * @member {String} id
 */
ShipmentTracking.prototype['id'] = undefined;

/**
 * Carrier that is performing the shipment
 * @member {String} carrier
 */
ShipmentTracking.prototype['carrier'] = undefined;

/**
 * Tracking code in the carrier network
 * @member {String} trackingCode
 */
ShipmentTracking.prototype['trackingCode'] = undefined;

/**
 * URL to a public page provided by the carrier that shows tracking details for this tracker
 * @member {String} carrierTrackingUrl
 */
ShipmentTracking.prototype['carrierTrackingUrl'] = undefined;

/**
 * Date when the shipment began to be tracked
 * @member {Date} trackingDate
 */
ShipmentTracking.prototype['trackingDate'] = undefined;

/**
 * Current status of the package   * `initialized` Package shipment is initialized   * `inProcess` Package packing is in process   * `processed` Package packing was processed   * `shipped` Pacakage is shipped   * `inCustoms` Pacakage is in customs   * `delivered` Pacakage is delivered   * `returned` Pacakage is returned   * `error` Pacakage shipment status is undetermined  
 * @member {module:model/ShipmentTracking.StatusEnum} status
 */
ShipmentTracking.prototype['status'] = undefined;

/**
 * Date when the tracking status last changed
 * @member {Date} statusChangeDate
 */
ShipmentTracking.prototype['statusChangeDate'] = undefined;

/**
 * Text describing the reason for the status of the tracking
 * @member {String} statusChangeReason
 */
ShipmentTracking.prototype['statusChangeReason'] = undefined;

/**
 * Weight of the package in grams
 * @member {Number} weight
 */
ShipmentTracking.prototype['weight'] = undefined;

/**
 * Estimated deliveryDate
 * @member {Date} estimatedDeliveryDate
 */
ShipmentTracking.prototype['estimatedDeliveryDate'] = undefined;

/**
 * @member {module:model/Address} addressFrom
 */
ShipmentTracking.prototype['addressFrom'] = undefined;

/**
 * @member {module:model/Address} addressTo
 */
ShipmentTracking.prototype['addressTo'] = undefined;

/**
 * Orders that triggered this shipment
 * @member {Array.<module:model/OrderRefType>} order
 */
ShipmentTracking.prototype['order'] = undefined;

/**
 * @member {module:model/CustomerRefType} relatedCustomer
 */
ShipmentTracking.prototype['relatedCustomer'] = undefined;

/**
 * Date when tracking shipment was created
 * @member {Date} createDate
 */
ShipmentTracking.prototype['createDate'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ShipmentTracking['StatusEnum'] = {

    /**
     * value: "initialized"
     * @const
     */
    "initialized": "initialized",

    /**
     * value: "inProcess"
     * @const
     */
    "inProcess": "inProcess",

    /**
     * value: "processed"
     * @const
     */
    "processed": "processed",

    /**
     * value: "shipped"
     * @const
     */
    "shipped": "shipped",

    /**
     * value: "inCustoms"
     * @const
     */
    "inCustoms": "inCustoms",

    /**
     * value: "delivered"
     * @const
     */
    "delivered": "delivered",

    /**
     * value: "returned"
     * @const
     */
    "returned": "returned",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};



export default ShipmentTracking;

